# -*- coding: utf-8 -*-
"""Breaking_Bad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UWGdosBQFNokSkJkMqWwyKi0bOqbtjJ6

1. Carregamento dos Dados
"""

import pandas as pd
from google.colab import drive

# Montar o Google Drive
drive.mount('/content/drive')

# Carregando o primeiro arquivo
df_episodes = pd.read_csv('/content/drive/MyDrive/Projetos_Analise_de_Dados/Breaking_Bad/breaking_bad_episodes.csv')

# Carregando o segundo arquivo
df_imdb = pd.read_csv('/content/drive/MyDrive/Projetos_Analise_de_Dados/Breaking_Bad/breaking_bad_imdb.csv')

"""2. Exploração Inicial e Compreensão dos Dados

2.1. Explorando df_episodes
"""

# 1. Visualizando as primeiras linhas
print("\n1. df_episodes.head():")
print(df_episodes.head())

"""###### Dataset `df_episodes` possui 8 colunas:

- **Season**: O número da temporada a que o episódio pertence;
- **Episode_Number_in_Season**: O número do episódio dentro daquela temporada específica;
- **Episode_Number_Overall**: O número sequencial do episódio considerando a série inteira;
- **Title**: O título do episódio;
- **Directed_by**: O nome do diretor do episódio;
- **Written_by**: O nome do roteirista do episódio;
- **Original_Air_Date**: A data em que o episódio foi originalmente exibido nos Estados Unidos;
- **US_Viewers_Millions**: O número de espectadores (em milhões) que assistiram à primeira exibição do episódio nos EUA.
"""

# Visualizando as últimas linhas
print("\n2. df_episodes.tail():")
print(df_episodes.tail())

"""Dataset df_episodes possui **62 linhas** contando com a linha 0. Informação que confirma o número de episódios da série.



"""

# 3. Obtendo informações sobre tipos de dados e valores não nulos
print("\n3. df_episodes.info():")
df_episodes.info()

"""###### Qualidade dos Dados - Dataset Episodes:

As colunas (season, episode_num_in_season, episode_num_overall, title, directed_by, written_by) parecem estar com os tipos de dados corretos e sem valores ausentes.

Porém, temos problemas:
- **original_air_date (object)**: Embora não tenha valores ausentes, o tipo é `object` (string). Para fazer análises temporais (como evolução por data), será necessário converter esta coluna para o tipo `datetime`.
- **us_viewers (float64)**: 57 non-null de 62. **Ponto Crucial de Tratamento!** Esta coluna possui 5 valores ausentes. O tipo `float64` está correto para representar milhões de espectadores (números com casas decimais), mas será necessário decidir como tratar esses valores faltantes.

"""

# Gerando estatísticas descritivas para colunas numéricas
print("\n5. df_episodes.describe():")
print(df_episodes.describe())

"""###### Estrutura da Série:

- **count (62 em todas)**: Confirma que temos dados para todos os 62 episódios.
- **season**: O valor máximo de 5 confirma que a série tem **5 temporadas**.
- **episode_num_in_season**: O valor máximo de 16 revela que uma temporada teve **16 episódios**.
- **episode_num_overall**: O valor máximo de 62 confirma o **total de episódios na série**.

---

###### Audiência (`us_viewers`):

**Destaques da coluna `us_viewers`:**
- **count (57.000000)**: Há **5 valores ausentes** (62 total - 57 preenchidos).  Um ponto que precisa de tratamento.
- **mean (2.324386 milhões)**: A **média de espectadores por episódio** em toda a série.
- **min (0.970000 milhões)**: O episódio **menos assistido** teve **970 mil espectadores**.
- **max (10.280000 milhões)**: O episódio **mais assistido** teve **10.28 milhões de espectadores**.
- **50% (mediana): 1.71 milhões**: Metade dos episódios teve **menos de 1.71 milhões de espectadores**.  
  Isso indica que a audiência foi **crescendo gradualmente ao longo da série**.

2.2. Explorando df_imdb
"""

# Visualizando as primeiras linhas
print("\n1. df_imdb.head():")
print(df_imdb.head())

"""Dataset df_episodes possui 8 colunas:

- **season**: Número da temporada.
- **episode_num**: Número do episódio dentro da temporada.
- **title**: Título do episódio.
- **original_air_date**: Data de exibição original.
- **imdb_rating**: Avaliação do episódio no IMDb.
- **total_votes**: Número total de votos no IMDb.
- **desc**: Descrição ou sinopse do episódio.  
  

"""

# Visualizando as últimas linhas
print("\n2. df_imdb.tail():")
print(df_imdb.tail())

"""Dataset df_episodes possui **62 linhas** contando com a linha 0. Como no dataset anterior."""

# Obtendo informações sobre tipos de dados e valores não nulos
print("\n3. df_imdb.info():")
df_imdb.info()

"""###### Qualidade dos Dados - Dataset IMDb:

- **Valores Ausentes**:  
  **Não há valores ausentes** em nenhuma coluna deste DataFrame. Isso é um ponto muito positivo para a qualidade dos dados do IMDb!

- **Tipo de Dados Incorreto para Análise**:  
 A coluna `original_air_date` está como `object` (string) e **precisa ser convertida para `datetime`**, assim como foi necessário no `df_episodes`.

- **Outras Colunas**:  
  As demais colunas (`season`, `episode_num`, `title`, `imdb_rating`, `total_votes`, `desc`) parecem estar com os **tipos de dados corretos** e **sem valores ausentes**.

"""

# Gerando estatísticas descritivas para colunas numéricas
print("\n5. df_imdb.describe():")
print(df_imdb.describe())

"""###### Estrutura (Revisão):

- As colunas `season` e `episode_num` fornecem informações consistentes sobre a estrutura da série, com **62 episódios distribuídos em 5 temporadas**, como já observado no `df_episodes`.

---

###### Aclamação da Crítica e do Público (`imdb_rating`):

- **count (62)**: Temos **avaliações do IMDb para todos os 62 episódios**, sem valores ausentes.
- **mean (9.017742)**: A **média de 9.02** de notas no IMDb
- **min (7.90)**: O episódio com a nota mais baixa no IMDb
- **max (10.00)**: Um episódio atingiu a **nota máxima de 10.0** .
- **50% (mediana): 9.00**: Metade dos episódios tem **nota igual ou superior a 9.0**.

---

###### Engajamento Massivo do Público (`total_votes`):

- **count (62)**: Sem valores ausentes.
- **mean (25.414,84 votos)**: A média de mais de **25 mil votos por episódio**
- **min (16.545 votos)**: Episódio com **menos votos** teve mais de **16 mil votos**.
- **max (158.341 votos)**: Esse valor é o **dado mais impactante**: reflete como a série se tornou **viral**, especialmente nos episódios finais.

3. Tratamento de Valores Ausentes (Missing Values)

3.1. Identificar Valores Ausentes

No item 2.1 identificamos que a variável us_viewers (espectadores) apresentava 5 valores ausentes. Chegou o momento de ajustar esse problema. Primeiro, vamos confirmar a contagem de valores ausentes em ambos os DataFrames, para ter certeza e documentar.
"""

print("--- Verificação de Valores Ausentes ---")

print("\nValores ausentes em df_episodes:")
print(df_episodes.isnull().sum())

print("\nValores ausentes em df_imdb:")
print(df_imdb.isnull().sum())

"""Com a confirmação acima, seguiremos com os próximos passos. Note que outro dataset df_imdb não há valores ausentes.

3.2. Estratégia de Tratamento para us_viewers em df_episodes

Optei por preencher os valores ausentes com a **mediana** porque ela é uma medida de tendência central **menos influenciada por outliers**. Como a distribuição da audiência apresenta assimetrias — com alguns episódios muito acima da média —, a mediana se mostra uma alternativa mais robusta e representativa do comportamento típico da variável.
"""

print("\n--- Tratamento de Valores Ausentes em df_episodes ---")

# 1. Calculando a mediana da coluna 'us_viewers'
median_us_viewers = df_episodes['us_viewers'].median()
print(f"Mediana da coluna 'us_viewers': {median_us_viewers:.2f} milhões")

# 2. Preenchendo os valores ausentes (NaN) na coluna 'us_viewers' com a mediana
df_episodes['us_viewers'].fillna(median_us_viewers, inplace=True)
print("Valores ausentes em 'us_viewers' preenchidos com a mediana.")

# 3. Verificar novamente os valores ausentes para confirmar o tratamento
print("\nVerificação final de valores ausentes em df_episodes:")
print(df_episodes.isnull().sum())

"""4. Padronização e Limpeza de Dados

4.1. Conversão de Tipos de Dados

A conversão de original_air_date para datetime é essencial, já que o formato atual como texto limita qualquer análise temporal.
"""

print("--- 4.1. Conversão de Tipos de Dados ---")

# Convertendo 'original_air_date' em df_episodes para datetime
df_episodes['original_air_date'] = pd.to_datetime(df_episodes['original_air_date'])
print("Coluna 'original_air_date' em df_episodes convertida para datetime.")

# Convertendo 'original_air_date' em df_imdb para datetime
df_imdb['original_air_date'] = pd.to_datetime(df_imdb['original_air_date'])
print("Coluna 'original_air_date' em df_imdb convertida para datetime.")

# Verificando os tipos de dados novamente para confirmar
print("\nNovos tipos de dados em df_episodes:")
df_episodes.info()

print("\nNovos tipos de dados em df_imdb:")
df_imdb.info()

"""5. Unificação/Combinação de Dados

5.1. Criar a Coluna episode_ID em df_episodes

Agora será criada uma coluna chamada episode_ID concatenando a season e episode_num_in_season, com um formato SXXEXX (Temporada X, Episódio Y).
"""

print("--- 6.1. Criar a Coluna 'episode_ID' em df_episodes ---")

# Para garantir a formatação 'S01E01', convertemos para string e preenchemos com zeros à esquerda
df_episodes['episode_ID'] = 'S' + df_episodes['season'].astype(str).str.zfill(2) + \
                            'E' + df_episodes['episode_num_in_season'].astype(str).str.zfill(2)

print("Coluna 'episode_ID' criada em df_episodes.")
print(df_episodes[['season', 'episode_num_in_season', 'episode_ID']].head())

"""5.2 Criar a Coluna episode_ID em df_imdb

Da mesma forma, criaremos a coluna episode_ID em df_imdb usando season e episode_num.
"""

print("\n--- 6.2. Criar a Coluna 'episode_ID' em df_imdb ---")

# Para garantir a formatação 'S01E01', convertemos para string e preenchemos com zeros à esquerda
df_imdb['episode_ID'] = 'S' + df_imdb['season'].astype(str).str.zfill(2) + \
                        'E' + df_imdb['episode_num'].astype(str).str.zfill(2)

print("Coluna 'episode_ID' criada em df_imdb.")
print(df_imdb[['season', 'episode_num', 'episode_ID']].head())

"""5.4 Executar o Merge dos DataFrames Usando episode_ID

Agora que temos uma chave comum e única em ambos os DataFrames, podemos realizar o inner merge para juntar ambos de forma segura.
"""

print("\n--- 6.3. Executar o Merge dos DataFrames Usando 'episode_ID' ---")

# Realizar o inner merge usando 'episode_ID' como chave
# Note que 'title' e 'original_air_date' ainda serão duplicados e renomeados com sufixos
df_combined = pd.merge(df_episodes, df_imdb,
                       on='episode_ID', # Apenas uma coluna de chave agora!
                       how='inner',
                       suffixes=('_episodes', '_imdb'))

print("DataFrames df_episodes e df_imdb combinados com sucesso em df_combined usando 'episode_ID'!")

# Verificar o shape do DataFrame combinado
print(f"\nShape do DataFrame combinado (df_combined): {df_combined.shape}")

# Exibir as primeiras linhas do DataFrame combinado para inspeção
print("\n--- Primeiras 5 linhas de df_combined ---")
print(df_combined.head())

"""5.4. Tratamento de Colunas

Após o merge, ainda teremos algumas colunas redundantes que vieram de ambos os DataFrames (além do episode_ID que foi a chave de junção). Mas antes, será preciso mudar o nome de algumas para deixar de mais facil entendimento.
"""

# Renomeando as colunas que vieram do df_imdb para algo mais claro
df_combined.rename(columns={
    'total_votes': 'imdb_total_votes',
    'desc': 'episode_description',
    'season_imdb': 'season_from_imdb',
    'episode_num_in_season_imdb': 'episode_num_in_season_from_imdb'
}, inplace=True)

print("Algumas colunas foram renomeadas para clareza e evitar confusão.")

# Removendo as colunas que não precisamos
# Vamos remover a versão '_imdb' das colunas que já temos do df_episodes (title, original_air_date)
# E também as chaves season e episode_num_in_season que vieram do df_imdb (se você quer manter apenas a de df_episodes)
columns_to_drop = [
    'season_from_imdb', # Já temos 'season' do df_episodes
    'episode_num_in_season_from_imdb', # Já temos 'episode_num_in_season' do df_episodes
    'title_imdb', # Já temos 'title' do df_episodes
    'original_air_date_imdb' # Já temos 'original_air_date' do df_episodes
]

# Remover as colunas se existirem no DataFrame
for col in columns_to_drop:
    if col in df_combined.columns:
        df_combined.drop(columns=[col], inplace=True)
        print(f"Coluna '{col}' removida.")

# Uma última verificação para o shape final
print(f"\nShape final do DataFrame combinado (df_combined) após remover redundâncias: {df_combined.shape}")

# E as colunas finais
print("\nColunas finais do DataFrame combinado:")
print(df_combined.columns.tolist())

# Exibir as primeiras linhas do DataFrame FINAL combinado para inspeção
print("\n--- Primeiras 5 linhas do df_combined FINAL ---")
print(df_combined.head())

"""6. Verificação Final e Preparação para Análise"""

print("--- 7.1. Verificação Final: df_combined.info() ---")
print("\nInformações sobre o DataFrame combinado após todo o tratamento:")
df_combined.info()

print("\n\n--- 7.1. Verificação Final: df_combined.describe() ---")
print("\nEstatísticas descritivas do DataFrame combinado após todo o tratamento:")
print(df_combined.describe())

"""Após o merge dos dois DataFrames, o resultado ficou excelente: mantivemos os 62 episódios e todas as colunas esperadas estão lá. A renomeação da sinopse para episode_description funcionou, assim como o tratamento de valores ausentes em us_viewers — agora todas as colunas estão completas, sem nenhum NaN.

Em relação aos tipos de dados, tudo está no formato ideal: datas convertidas corretamente, colunas numéricas e categóricas bem definidas. A saída do .describe() só confirma o que já vínhamos observando — dados bem estruturados, padrões claros de audiência e notas altas no IMDb. Isso mostra que o processo de integração e limpeza foi bem-sucedido e o dataset final está pronto para análises mais aprofundadas.

7. Analise de dados

7.1 A Jornada de Breaking Bad: De Série Promissora a Fenômeno Aclamado – Os Dados Comprovam

7.1.1 Início Promissor
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Filtrar apenas a 1ª temporada
temporada_1 = df_combined[df_combined['season_episodes'] == 1]

# Definir estilo
sns.set(style="whitegrid")
plt.figure(figsize=(12, 6))

# Gráfico 1: IMDb Rating por episódio da 1ª temporada
sns.barplot(data=temporada_1, x="episode_num_in_season", y="imdb_rating", palette="Blues_d")
plt.title("Avaliação IMDb por Episódio - Temporada 1")
plt.xlabel("Episódio")
plt.ylabel("IMDb Rating")
plt.ylim(0, 10)
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(data=temporada_1, x="episode_num_in_season", y="imdb_total_votes", palette="Greens_d")
plt.title("Total de Votos no IMDb por Episódio - Temporada 1")
plt.xlabel("Episódio")
plt.ylabel("Número de Votos")
plt.show()

plt.figure(figsize=(12, 6))
sns.barplot(data=temporada_1, x="episode_num_in_season", y=temporada_1["us_viewers"] / 1_000_000, palette="Oranges_d")
plt.title("Audiência nos EUA por Episódio - Temporada 1")
plt.xlabel("Episódio")
plt.ylabel("Espectadores (milhões)")
plt.ylim(0, 2)  # limite ajustado conforme valores da 1ª temporada (~1.5M)
plt.show()

"""Mesmo em seus primeiros episódios, Breaking Bad já mostrava sinais claros de qualidade e potencial. A 1ª temporada apresentou avaliações sólidas no IMDb — todas acima de 8 —, um volume considerável de votos do público, e uma audiência que, embora modesta no início, se manteve estável e engajada até o final da temporada. Esses dados mostram que a série começou bem, conquistando aos poucos um público fiel e uma recepção crítica muito positiva.

E o mais interessante vem agora: a partir da segunda temporada, esse engajamento inicial se transforma em crescimento acelerado — tanto em popularidade quanto em aclamação crítica. Vamos ver como Breaking Bad saiu de um bom começo para se tornar um verdadeiro fenômeno.

7.1.2 Crescimento e Reconhecimento
"""

plt.figure(figsize=(14, 6))
sns.lineplot(data=df_combined, x="episode_num_overall", y="imdb_rating", marker="o", color="steelblue")
plt.title("Evolução da Avaliação IMDb por Episódio")
plt.xlabel("Episódio (ordem geral)")
plt.ylabel("IMDb Rating")
plt.ylim(0, 10)
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(data=df_combined, x="season_episodes", y="imdb_rating", palette="Blues_d")
plt.title("Média da Avaliação IMDb por Temporada")
plt.xlabel("Temporada")
plt.ylabel("IMDb Rating (Média)")
plt.ylim(0, 10)
plt.show()

plt.figure(figsize=(14, 6))
sns.lineplot(data=df_combined, x="episode_num_overall", y="imdb_total_votes", marker="o", color="seagreen")
plt.title("Total de Votos no IMDb por Episódio")
plt.xlabel("Episódio (ordem geral)")
plt.ylabel("Número de Votos")
plt.grid(True)
plt.show()

plt.figure(figsize=(14, 6))
sns.lineplot(data=df_combined, x="episode_num_overall", y=df_combined["us_viewers"] / 1_000_000, marker="o", color="darkorange")
plt.title("Audiência nos EUA por Episódio")
plt.xlabel("Episódio (ordem geral)")
plt.ylabel("Espectadores (milhões)")
plt.grid(True)
plt.show()

"""À medida que a série avança, Breaking Bad deixa de ser apenas promissora e se transforma em um fenômeno. As avaliações no IMDb seguem em uma trajetória crescente, com a média subindo temporada após temporada e diversos episódios ultrapassando a nota 9 — algo raro em séries de longa duração.

O público também responde: o número de votos por episódio dispara nas temporadas finais, chegando a picos impressionantes, sinal de um engajamento massivo e de uma base de fãs cada vez mais ativa. Esse crescimento é reforçado pelos dados de audiência: enquanto muitas séries perdem força com o tempo, Breaking Bad segue o caminho oposto, atraindo cada vez mais espectadores, especialmente em seus momentos decisivos.

Os dados não deixam dúvidas: a série não apenas manteve sua qualidade ao longo dos anos — ela evoluiu, conquistando crítica e público de forma consistente.

7.1.3 A Consagração – Episódios Lendários e um Final Épico
"""

# Selecionar os top 5 episódios com maior nota
top_5 = df_combined.sort_values(by="imdb_rating", ascending=False).head(5)

plt.figure(figsize=(10, 6))
sns.barplot(data=top_5, y="title_episodes", x="imdb_rating", palette="Blues_d")
plt.title("Top 5 Episódios Mais Bem Avaliados no IMDb")
plt.xlabel("Nota IMDb")
plt.ylabel("Episódio")
plt.xlim(9, 10.1)
plt.show()

# Filtrar os últimos 6 episódios
final_episodios = df_combined.sort_values(by="episode_num_overall", ascending=False).head(6).sort_values(by="episode_num_overall")

plt.figure(figsize=(10, 6))
sns.lineplot(data=final_episodios, x="title_episodes", y=final_episodios["us_viewers"] / 1_000_000, marker="o", color="darkorange")
plt.title("Audiência dos Episódios Finais de Breaking Bad")
plt.xlabel("Episódio")
plt.ylabel("Espectadores (milhões)")
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.barplot(data=final_episodios, x="title_episodes", y="imdb_total_votes", palette="Greens_d")
plt.title("Total de Votos no IMDb – Episódios Finais")
plt.xlabel("Episódio")
plt.ylabel("Número de Votos")
plt.xticks(rotation=45)
plt.show()

"""Os dados confirmam o que muitos fãs já sentem: **Breaking Bad terminou em seu auge.** O gráfico dos episódios mais bem avaliados mostra um feito raro — não apenas por ter um episódio com nota 10 (“Ozymandias”), mas por concentrar os cinco melhores episódios justamente nas temporadas finais. Isso demonstra uma **consistência crescente**, algo difícil de alcançar em séries longas.

Esse reconhecimento também se reflete na audiência: os últimos episódios apresentam uma escalada nítida de espectadores, culminando com **mais de 10 milhões de pessoas** assistindo ao episódio final, “Felina”. E o engajamento do público foi igualmente impressionante — episódios como “Ozymandias” e “Felina” somam dezenas de milhares de votos no IMDb, consolidando seu **impacto cultural**.

A reta final de Breaking Bad não apenas manteve o nível. Ela elevou a série a um patamar histórico.

---

7.1.4 Conclusão: Dados que Contam uma História

Ao longo das cinco temporadas de Breaking Bad, vimos uma narrativa poderosa não apenas na tela, mas também nos dados.

A série começou bem, com boas avaliações e uma base de público sólida. Mas foi com o passar dos episódios que ela realmente se transformou em um fenômeno. As notas no IMDb cresceram, a média por temporada se manteve altíssima, e os episódios finais atingiram um nível de aclamação raramente visto — inclusive com um episódio nota 10, milhares de votos e mais de 10 milhões de espectadores no encerramento.

A trajetória revelada pelos dados reforça aquilo que a crítica e o público já sabiam: Breaking Bad não só manteve sua qualidade ao longo do tempo — ela melhorou. Cresceu em relevância, conquistou uma audiência cada vez mais engajada e entregou um final à altura da sua história.

Mais do que estatísticas, esses números contam uma verdade difícil de ignorar: Breaking Bad é, sem dúvida, uma das maiores séries já feitas. E os dados só ajudam a provar isso.
"""